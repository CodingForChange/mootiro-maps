#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals  # unicode by default

from django.contrib.gis.db import models


class Update(models.Model):
    """An update generated by users interaction"""

    title = models.CharField(max_length=256, null=False)
    link = models.CharField(max_length=512, null=False)
    date = models.DateTimeField(auto_now=True)
    object_type = models.CharField(max_length=32, null=False, db_index=True)
    comments_count = models.IntegerField(null=True)

    # update type
    ADD = "A"
    EDIT = "E"
    DISCUSSION = "D"
    TYPES = {
        "A": "added",
        "E": "edited",
        "D": "discussed",
    }
    typ = models.CharField(max_length=1, null=False, db_index=True,
            choices=tuple(TYPES.items()))
    @property
    def type(self):
        return self.TYPES[self.typ]

    # comma-separated list of usernames
    _users = models.CharField(max_length=1024)

    @property
    def users(self):
        return self._users.split(',')

    @users.setter
    def users(self, l):
        self._users = ','.join(l)

    # comma-separated list of communities slugs
    _communities = models.CharField(max_length=1024)

    @property
    def communities(self):
        if self._communities:
            return [tuple(cs.split(',')) for cs in self._communities.split('|')]

    @communities.setter
    def communities(self, l):
        if l:
            self._communities = '|'.join([','.join((c.view_url, c.name)) for c in l])

    def __unicode__(self):
        return unicode(self.title)

    @property
    def name(self):
        return self.title

    @property
    def image(self):
        action = {"A": "add", "E": "edit", "D": "discussion"}[self.typ]
        path = "img/updates-page/{}-{}.png".format(self.object_type, action)
        return path


# How this works? Isn't it a circular dependency???
import signals
